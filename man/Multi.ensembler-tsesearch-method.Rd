% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classmethods-tsesearch.R
\docType{methods}
\name{Multi.ensembler,tsesearch-method}
\alias{Multi.ensembler,tsesearch-method}
\title{Learning a Dynamic Ensemble for Time Series Forecasting for \emph{Multi}ple Series}
\usage{
\S4method{Multi.ensembler}{tsesearch}(obj, save.each = FALSE,
  save.signature = "Exp", auto.tune = FALSE, ...)
}
\arguments{
\item{obj}{An object of class \code{tsensembler}. The main difference between the
\code{ensembler} and \code{Multi.ensembler} methods with respect to \strong{obj} is that
the latter \emph{timeseries} parameter is a list of \code{xts} timeseries.}

\item{save.each}{Logical: Should each time series' experiment be saved? Defaults to TRUE}

\item{save.signature}{The name of the file template to save the experiments}

\item{auto.tune}{Logical: Should auto.ensemble be executed? Defaults to FALSE.}

\item{...}{Further parameters to \code{auto.ensembler}}
}
\value{
If the \emph{modelOutput} parameter from \code{tsensembler-class} object is set to TRUE,
the function will return a predictive model ensemble of class \code{tseModel}. Otherwise,
performance metrics are return.
}
\description{
This is the implementation of the learning procedure of the ensemble method for
\strong{Multi}ple Time Series.
The application is run on an object of class \code{tsensembler}, which provide
the options about how the ensemble should be construct such as: the embedding
dimension; the number of Monte Carlo repetitions, etc.
}
\details{
This method is built on top of \code{\link[performanceEstimation]{performanceEstimation}}.
It provides a framework for estimating the performance of many workflows.
}
\examples{

\dontrun{
require(xts)
ts1 <- as.xts(rnorm(100L), order.by = Sys.Date() + seq_len(100L))
ts2 <- as.xts(rnorm(200L), order.by = Sys.Date() + seq_len(200L))
TSEr <- tsensembler(timeseries = list(one.ts = ts1, two.ts = ts2),
                    workflow = Workflow(wf = 'TSE',
                                        learner = c('MARS', 'PPR'),
                                        learner.pars = list(mars = list(nk = c(5, 2),
                                                                        degree= c(3, 4)),
                                                            ppr = list(nterms = c(2,3,4))),
                                        varying.embed = TRUE,
                                        varying.trainwindow = FALSE,
                                        committee.ratio = .1,
                                        aggregationFUN = "regret-wcommittee",
                                        verbose = FALSE),
                    embedding.dimension = 30,
                    nReps = 2,
                    modelOutput = TRUE)
tse.model <- ensembler(TSEr)
}

}
\seealso{
\code{\link{tsensembler-class}} for details about the \strong{obj} and
\code{\link{tseModel-class}} for details on the generated model.
\code{\link[performanceEstimation]{MonteCarlo-class}} comprises an explanation
about the Monte Carlo simulation procedure. \code{\link{TSE}} for details on the workflow
for the time series ensemble.
}
